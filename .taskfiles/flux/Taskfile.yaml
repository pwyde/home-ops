---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

tasks:

  # Ref: https://fluxcd.io/flux/components/kustomize/kustomizations/#triggering-a-reconcile
  annotate-ks:
    desc: Annotate ALL Kustomizations resources to trigger reconcile
    prompt: This will annotate ALL Kustomizations resources... Continue?
    cmds:
      - |
        for NS in $(kubectl get namespaces -o jsonpath='{.items[*].metadata.name}'); do
          for KS in $(kubectl get kustomizations.kustomize.toolkit.fluxcd.io --namespace $NS -o name); do
            kubectl annotate --namespace $NS --field-manager=flux-client-side-apply --overwrite $KS reconcile.fluxcd.io/requestedAt="$(date +%s)"
          done
        done
    preconditions:
      - test -f {{.KUBECONFIG}}
      - which kubectl
      - which flux

  # Ref: https://fluxcd.io/flux/components/helm/helmreleases/#forcing-a-release
  annotate-hr:
    desc: Annotate ALL HelmRelease resources to force a release
    prompt: This will annotate ALL HelmRelease resources... Continue?
    cmds:
      - |
        TOKEN="$(date +%s)"
        for NS in $(kubectl get namespaces -o jsonpath='{.items[*].metadata.name}'); do
          for HR in $(kubectl get helmreleases --namespace $NS -o jsonpath='{.items[*].metadata.name}'); do
            kubectl --namespace $NS annotate --field-manager=flux-client-side-apply --overwrite helmreleases.helm.toolkit.fluxcd.io/$HR "reconcile.fluxcd.io/requestedAt=$TOKEN" "reconcile.fluxcd.io/forceAt=$TOKEN"
          done
        done
    preconditions:
      - test -f {{.KUBECONFIG}}
      - which kubectl
      - which flux

  apply-ks:
    desc: Apply a Flux Kustomization resource
    summary: |
      Apply a Flux Kustomization resource

      PATH: Path to the Flux Kustomization resource (required)
      NS: Namespace the Flux Kustomization exists in (default: flux-system)

      Example:
      task flux:apply-ks PATH=media/jellyfin
    requires:
      vars: [PATH]
    vars:
      NS: '{{.NS | default "flux-system"}}'
      KS:
        sh: flux --namespace {{.NS}} get kustomizations $(basename {{.PATH}}) 2>&1
    cmd: >
      flux build --namespace {{.NS}} ks $(basename {{.PATH}})
      --kustomization-file {{.KUBERNETES_DIR}}/apps/{{.PATH}}/ks.yaml
      --path {{.KUBERNETES_DIR}}/apps/{{.PATH}}
      {{- if contains "not found" .KS }}--dry-run \{{ end }}
      | yq 'with(select(.apiVersion == "kustomize.toolkit.fluxcd.io/v1" and .kind == "Kustomization"); .metadata.namespace = "{{.NS}}")' -
      | kubectl apply --server-side --field-manager=kustomize-controller --filename -
    preconditions:
      - test -f {{.KUBERNETES_DIR}}/apps/{{.PATH}}/ks.yaml

  reconcile:
    desc: Force update Flux to pull in changes from Git repository
    cmds:
      - flux get ks --no-header --namespace flux-system | awk '{print $1, $2}' | xargs -L1 bash -c 'flux reconcile ks --namespace flux-system $0'
      - flux get ks --all-namespaces --no-header | awk '{print $1, $2}' | xargs -L1 bash -c 'flux reconcile ks --namespace $0 $1'
    preconditions:
      - test -f {{.KUBECONFIG}}
      - which flux

  hr-restart:
    desc: Restart all failed HelmRelease resources
    cmds:
      - kubectl get hr --all-namespaces | grep False | awk '{print $1, $2}' | xargs -L1 bash -c 'flux suspend hr ks --namespace $0 $1'
      - kubectl get hr --all-namespaces | grep False | awk '{print $1, $2}' | xargs -L1 bash -c 'flux resume hr ks --namespace $0 $1'
    preconditions:
      - test -f {{.KUBECONFIG}}
      - which kubectl
      - which flux

  ks-*:
    desc: Suspend or resume ALL Kustomization resources
    prompt: This will suspend/resume ALL ALL Kustomization resources... Continue?
    summary: |
      Suspend or resume ALL Kustomization resources

      Example:
      task flux:ks-suspend
      task flux:ks-resume
    vars:
      STATE: '{{index .MATCH 0}}'
    cmds:
      - kubectl get ns -o jsonpath='{.items[*].metadata.name}' | xargs -n1 flux {{.STATE}} ks --all --namespace
    preconditions:
      - '[[ "{{.STATE}}" == "suspend" || "{{.STATE}}" == "resume" ]]'
      - which flux kubectl

  sync-ks:
    desc: Sync a Flux Kustomization resource
    summary: |
      Sync a Flux Kustomization resource

      KS: Name of the Flux Kustomization resource (optional)
      NS: Namespace the Flux Kustomization exists in (default: flux-system)
    vars:
      KS: '{{.KS | default ""}}'
      NS: '{{.NS | default "flux-system"}}'
    cmds:
      - |
        {{- if eq .KS ""}}
        kubectl get kustomization --all-namespaces --no-headers -A \
          | awk '{print $1, $2}' \
          | xargs --max-procs=8 -l bash -c 'flux reconcile kustomization --namespace $0 $1'
        {{- else}}
        flux reconcile kustomization --namespace {{.NS}} {{.KS}}
        {{- end}}
    preconditions:
      - kubectl --namespace {{.NS}} get kustomization {{.KS}}
