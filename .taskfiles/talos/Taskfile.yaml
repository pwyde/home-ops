---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

vars:
  SYSTEM_UPGRADE_KS: '{{.KUBERNETES_DIR}}/apps/system-upgrade/system-upgrade-controller/ks.yaml'

env:
  KUBERNETES_VERSION:
    sh: yq '.spec.postBuild.substitute.KUBERNETES_VERSION | select(.)' {{.SYSTEM_UPGRADE_KS}}
  TALOS_VERSION:
    sh: yq '.spec.postBuild.substitute.TALOS_VERSION | select(.)' {{.SYSTEM_UPGRADE_KS}}

tasks:

  apply-node:
    desc: Apply Talos config to a node [NODE=required] [MODE={{.MODE}}]
    cmd: |
      minijinja-cli {{.TALOS_DIR}}/nodes/{{.NODE}}.yaml.j2 \
        | op inject \
        | talosctl --nodes {{.NODE}} apply-config \
          --mode={{.MODE}} \
          --file /dev/stdin {{if eq .INSECURE "true"}}--insecure{{end}}
    vars:
      MODE: '{{.MODE | default "auto"}}'
      INSECURE:
        sh: talosctl --nodes {{.NODE}} get machineconfig &> /dev/null && echo false || echo true
    requires:
      vars:
        - NODE
    preconditions:
      - op user get --me
      - talosctl config info
      - test -f {{.TALOS_DIR}}/nodes/{{.NODE}}.yaml.j2
      - test -f {{.TALOS_DIR}}/schematic.yaml.j2
      - which minijinja-cli op talosctl

  upgrade-node:
    desc: Upgrade Talos on a single node [NODE=required]
    cmd: talosctl --nodes {{.NODE}} upgrade --image="factory.talos.dev/metal-installer-secureboot/$TALOS_SCHEMATIC:$TALOS_VERSION" --timeout=10m
    env:
      TALOS_SCHEMATIC:
        sh: |-
          minijinja-cli {{.TALOS_DIR}}/schematic.yaml.j2 \
            | curl --silent -X POST --data-binary @- https://factory.talos.dev/schematics \
            | jq --raw-output '.id'
    requires:
      vars:
        - NODE
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.NODE}} get machineconfig
      - test -f {{.TALOS_DIR}}/schematic.yaml.j2
      - which minijinja-cli talosctl yq

  upgrade-kubernetes:
    desc: Upgrade Kubernetes across the whole cluster
    cmd: talosctl --nodes {{.NODE}} upgrade-k8s --to $KUBERNETES_VERSION
    vars:
      NODE:
        sh: talosctl config info --output json | jq --exit-status --raw-output '.endpoints[]' | shuf -n 1
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.NODE}} get machineconfig
      - which jq talosctl

  reboot-node:
    desc: Reboot Talos on a single node [NODE=required] [MODE={{.MODE}}]
    cmd: talosctl --nodes {{.NODE}} reboot --mode={{.MODE}}
    vars:
      MODE: '{{.MODE | default "default"}}'
    requires:
      vars:
        - NODE
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.NODE}} get machineconfig
      - which talosctl

  shutdown-cluster:
    desc: Shutdown Talos across the whole cluster
    prompt: Shutdown the Talos cluster... Continue?
    cmd: talosctl --nodes {{.NODES}} shutdown --force
    vars:
      NODES:
        sh: talosctl config info --output json | jq --join-output '[.nodes[]] | join(",")'
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.NODES}} get machineconfig
      - which jq talosctl

  reset-node:
    desc: Reset Talos on a single node [NODE=required]
    prompt: Reset Talos node '{{.NODE}}'... Continue?
    cmd: talosctl --nodes {{.NODE}} reset --graceful=false --reboot
    requires:
      vars:
        - NODE
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.NODE}} get machineconfig
      - which talosctl

  reset-cluster:
    desc: Reset Talos across the whole cluster
    prompt: Reset the Talos cluster... Continue?
    cmd: talosctl --nodes {{.NODES}} reset --graceful=false --reboot
    vars:
      NODES:
        sh: talosctl config info --output json | jq --join-output '[.nodes[]] | join(",")'
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.NODES}} get machineconfig
      - which jq talosctl

  generate-kubeconfig:
    desc: Generate the kubeconfig for a Talos cluster
    cmd: talosctl kubeconfig --nodes {{.RANDOM_CONTROLLER}} --force {{.KUBERNETES_DIR}}
    vars:
      RANDOM_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
    preconditions:
      - talosctl config info
      - talosctl --nodes {{.RANDOM_CONTROLLER}} get machineconfig
      - which jq talosctl

  generate-iso:
    desc: Generate a Talos ISO for bare metal install [VERSION=required]
    cmd: |
      curl -L -o {{.TALOS_DIR}}/talos-{{.VERSION}}-secureboot.iso \
        https://factory.talos.dev/image/{{.TALOS_SCHEMATIC}}/{{.VERSION}}/metal-amd64-secureboot.iso
    vars:
      TALOS_SCHEMATIC:
        sh: task --silent talos:generate-schematic ISO=true
    requires:
      vars:
        - VERSION
    preconditions:
      - which curl task

  generate-iso-vm:
    desc: Generate a Talos ISO for VM install [VERSION=required]
    cmd: |
      curl -L -o {{.TALOS_DIR}}/talos-{{.VERSION}}-vm.iso \
        https://factory.talos.dev/image/{{.TALOS_SCHEMATIC}}/{{.VERSION}}/metal-amd64.iso
    vars:
      TALOS_SCHEMATIC:
        sh: task --silent talos:generate-schematic-vm
    requires:
      vars:
        - VERSION
    preconditions:
      - which curl task

  generate-schematic:
    desc: Generate a Talos schematic for bare metal install [ISO={{.ISO}}]
    cmd: |
      minijinja-cli --define "iso={{.ISO}}" {{.TALOS_DIR}}/schematic.yaml.j2 \
        | curl --silent -X POST --data-binary @- https://factory.talos.dev/schematics \
        | jq --raw-output '.id'
    vars:
      ISO: '{{.ISO | default false}}'
    preconditions:
      - test -f {{.TALOS_DIR}}/schematic.yaml.j2
      - which curl jq minijinja-cli

  generate-schematic-vm:
    desc: Generate a Talos schematic for VM install
    cmd: |
      minijinja-cli {{.TALOS_DIR}}/schematic-vm.yaml.j2 \
        | curl --silent -X POST --data-binary @- https://factory.talos.dev/schematics \
        | jq --raw-output '.id'
    preconditions:
      - test -f {{.TALOS_DIR}}/schematic.yaml.j2
      - which curl jq minijinja-cli
