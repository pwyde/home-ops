---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

tasks:

  apply-config:
    desc: Apply Talos configuration to ALL nodes
    prompt: This will apply Talos configuration to ALL nodes... Continue?
    dir: '{{.TALOS_DIR}}'
    cmd: talhelper gencommand apply | bash
    preconditions:
      - talosctl config info
      - test -f {{.TALOSCONFIG}}
      - which talhelper talosctl yq

  apply-node:
    desc: Apply Talos configuration to a node
    summary: |
      Apply Talos configuration to a node

      HOSTNAME: Node hostname (required)
      MODE: Apply mode can be auto, interactive, no-reboot, reboot, staged, try (default: auto)

      Example:
      task talos:apply-node HOSTNAME=talos-1
    prompt: This will apply Talos configuration to node {{.HOSTNAME}}... Continue?
    dir: '{{.TALOS_DIR}}'
    vars:
      MODE: '{{.MODE | default "auto"}}'
    requires:
      vars: [HOSTNAME]
    cmd: talhelper gencommand apply --node {{.HOSTNAME}} --extra-flags '--mode={{.MODE}}' | bash
    preconditions:
      - talosctl --nodes {{.HOSTNAME}} get machineconfig
      - talosctl config info
      - test -f {{.TALOSCONFIG}}
      - which talhelper talosctl yq

  generate-config:
    desc: Generate Talos configuration
    prompt: This will generate Talos configuration... Continue?
    dir: '{{.TALOS_DIR}}'
    vars:
      SECRET_FILES:
        sh: find "{{.TALOS_DIR}}" -type f -name '*.sops.yaml' ! -name ".sops.yaml"
    cmds:
      - for: {var: SECRET_FILES}
        cmd: |
          # Enhance security by encrypting all unencrypted secrets.
          if sops filestatus "{{.ITEM}}" | jq --exit-status ".encrypted == false" &>/dev/null; then
              echo "Encrypting {{ .ITEM }}"
              sops --encrypt --in-place "{{.ITEM}}"
          fi
      - talhelper genconfig
    preconditions:
      - test -f {{.TALOS_DIR}}/talconfig.yaml
      - test -f {{.TALOS_DIR}}/talenv.sops.yaml
      - test -f {{.TALOS_DIR}}/talsecret.sops.yaml
      - test -f {{.ROOT_DIR}}/.sops.yaml
      - test -f {{.SOPS_AGE_KEY_FILE}}
      - which talhelper sops

  generate-secret:
    desc: Generate Talos secret, '--force' creates new secret
    prompt: This will create and encrypt Talos secret... Continue?
    dir: '{{.TALOS_DIR}}'
    cmds:
      - |
        {{if .CLI_FORCE}}
          # Backup the existing secret file if it exists.
          if [ -f {{.TALOS_DIR}}/talsecret.sops.yaml ]; then
            cp {{.TALOS_DIR}}/talsecret.sops.yaml {{.TALOS_DIR}}/talsecret.sops.yaml.bak
          fi
        {{end}}
      - talhelper gensecret > {{.TALOS_DIR}}/talsecret.sops.yaml
      - sops --encrypt --in-place {{.TALOS_DIR}}/talsecret.sops.yaml
    status:
      - test -f {{.TALOS_DIR}}/talsecret.sops.yaml
    preconditions:
      - test -f {{.TALOS_DIR}}/talconfig.yaml
      - test -f {{.TALOS_DIR}}/talsecret.sops.yaml
      - test -f {{.ROOT_DIR}}/.sops.yaml
      - test -f {{.SOPS_AGE_KEY_FILE}}
      - which talhelper sops

  reset-cluster:
    desc: Reset the whole Talos cluster, --force wipes the entire disk
    prompt: This will destroy the cluster and reset ALL nodes back to maintenance mode... Continue?
    dir: '{{.TALOS_DIR}}'
    cmds:
      - |
        {{if .CLI_FORCE}}
          # Wipes the entire disk.
          talhelper gencommand reset --extra-flags="--reboot --graceful=false --wait=false" | bash
        {{else}}
          # Only wipe the STATE and EPHEMERAL partitions.
          talhelper gencommand reset --extra-flags="--reboot --system-labels-to-wipe STATE --system-labels-to-wipe EPHEMERAL --graceful=false --wait=false" | bash
        {{end}}
    preconditions:
      - which talhelper

  reset-node:
    desc: Reset a single Talos node, '--force' wipes the entire disk
    summary: |
      Reset a single Talos node

      HOSTNAME: Node hostname (required)

      Example:
      task talos:reset-node HOSTNAME=talos-1
    prompt: This will reset Talos node {{.HOSTNAME}}... Continue?
    dir: '{{.TALOS_DIR}}'
    requires:
      vars: [HOSTNAME]
    cmds:
      - |
        {{if .CLI_FORCE}}
          # Wipes the entire disk.
          talhelper gencommand reset --node {{.HOSTNAME}} --extra-flags="--reboot --graceful=false --wait=false" | bash
        {{else}}
          # Only wipe the STATE and EPHEMERAL partitions.
          talhelper gencommand reset --nodes {{.HOSTNAME}} --extra-flags="--reboot --system-labels-to-wipe STATE --system-labels-to-wipe EPHEMERAL --graceful=false --wait=false" | bash
        {{end}}
    preconditions:
      - which talhelper

  shutdown-cluster:
    desc: Shutdown the Talos cluster
    prompt: This will shutdown the Talos cluster... Continue?
    vars:
      NODES:
        sh: talosctl config info --output json | jq --exit-status --join-output '[.nodes[]] | join(",")'
    cmd: talosctl shutdown --nodes {{.NODES}} --force
    preconditions:
      - talosctl --nodes {{.NODES}} get machineconfig
      - test -f {{.TALOSCONFIG}}
      - which jq talosctl

  upgrade-k8s:
    desc: Upgrade Kubernetes
    prompt: This will upgrade Kubernetes... Continue?
    dir: '{{.TALOS_DIR}}'
    vars:
      KUBERNETES_VERSION:
        sh: yq '.kubernetesVersion' {{.TALOS_DIR}}/talenv.yaml
    cmd: talhelper gencommand upgrade-k8s --extra-flags "--to '{{.KUBERNETES_VERSION}}'" | bash
    preconditions:
      - talosctl config info
      - test -f {{.TALOSCONFIG}}
      - which talhelper talosctl yq

  upgrade-node:
    desc: Upgrade Talos on a single node
    summary: |
      Upgrade Talos on a single node

      HOSTNAME: Node hostname (required)

      Example:
      task talos:upgrade-node HOSTNAME=talos-1
    prompt: This will upgrade Talos on node {{.HOSTNAME}}... Continue?
    dir: '{{.TALOS_DIR}}'
    vars:
      TALOS_SCHEMATIC_ID:
        sh: kubectl get node {{.HOSTNAME}} --output=jsonpath='{.metadata.annotations.extensions\.talos\.dev/schematic}'
      TALOS_VERSION:
        sh: yq '.talosVersion' {{.TALOS_DIR}}/talenv.yaml
    requires:
      vars: [HOSTNAME]
    cmd: talhelper gencommand upgrade --node {{.HOSTNAME}} --extra-flags "--image='factory.talos.dev/installer/{{.TALOS_SCHEMATIC_ID}}:{{.TALOS_VERSION}}' --timeout=10m" | bash
    preconditions:
      - talosctl --nodes {{.HOSTNAME}} get machineconfig
      - talosctl config info
      - test -f {{.TALOSCONFIG}}
      - which kubectl talhelper talosctl yq
