---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: immich
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: app-template
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    controllers:
      immich:
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: ghcr.io/immich-app/immich-server
              tag: v2.0.1
            env: &env
              TZ: Europe/Stockholm
              IMMICH_CONFIG_FILE: /config/immich.json
              IMMICH_LOG_LEVEL: verbose
              IMMICH_MACHINE_LEARNING_URL: http://immich-machine-learning.self-hosted.svc.cluster.local:3003
              IMMICH_TELEMETRY_INCLUDE: all
              REDIS_HOSTNAME: dragonfly.database.svc.cluster.local
              REDIS_PORT: "6379"
              REDIS_DBINDEX: "2"
            envFrom: &envFrom
              - secretRef:
                  name: "{{ .Release.Name }}-secret"
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /api/server/ping
                    port: &port 2283
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
              startup:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /api/server/ping
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 30
            resources:
              requests:
                cpu: 500m
                memory: 1Gi
                # nvidia.com/gpu: 1 # Request 1 GPU.
              limits:
                # Disable during initial import of photographs.
                memory: 8Gi
                # nvidia.com/gpu: 1
            securityContext: &securityContext
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: {drop: ["ALL"]}
          machine-learning:
            image:
              repository: ghcr.io/immich-app/immich-machine-learning
              tag: v2.0.1
            env:
              <<: *env
              # Pre-loading of ML model must not be enabled during initial deployment. Will cause
              # crash loop otherwise.
              # Recommended model according to https://v1.131.0.archive.immich.app/docs/features/searching/#clip-models
              # Also see the following comment: https://github.com/immich-app/immich/discussions/17105#discussioncomment-12620002
              # MACHINE_LEARNING_PRELOAD__CLIP__TEXTUAL: "XLM-Roberta-Large-ViT-H-14__frozen_laion5b_s13b_b90k"
              # MACHINE_LEARNING_PRELOAD__CLIP__VISUAL: "XLM-Roberta-Large-ViT-H-14__frozen_laion5b_s13b_b90k"
              # MACHINE_LEARNING_PRELOAD__FACIAL_RECOGNITION__RECOGNITION: buffalo_l
              # MACHINE_LEARNING_PRELOAD__FACIAL_RECOGNITION__DETECTION: buffalo_l
              MPLCONFIGDIR: /tmp/matplotlib
              # NVIDIA_VISIBLE_DEVICES: "all"
              # NVIDIA_DRIVER_CAPABILITIES: "all"
            envFrom: *envFrom
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: &mlPort 3003
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            resources:
              requests:
                cpu: 100m
                memory: 2Gi
                # nvidia.com/gpu: 1 # Request 1 GPU.
              limits:
                # Disable during initial import of photographs.
                memory: 8Gi
                # nvidia.com/gpu: 1
            securityContext: *securityContext
    defaultPodOptions:
      # affinity:
      #   nodeAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #       nodeSelectorTerms:
      #         - matchExpressions:
      #             - key: gpu.home-ops/nvidia
      #               operator: In
      #               values:
      #                 - "true"
      # nodeSelector:
      #   gpu.home-ops/nvidia: "true"
      # priorityClassName: gpu-priority
      # runtimeClassName: nvidia
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
    persistence:
      cache:
        existingClaim: "{{ .Release.Name }}"
        advancedMounts:
          immich:
            machine-learning:
              - path: /cache
                subPath: cache
              - path: /.cache
                subPath: dot-cache
      config:
        type: secret
        name: "{{ .Release.Name }}-config-secret"
        globalMounts:
          - path: /config/immich.json
            subPath: immich.json
            readOnly: true
      data:
        type: nfs
        server: nas.${SECRET_DOMAIN}
        path: /mnt/hdd-data/Immich
        globalMounts:
          - path: /data
      photos:
        type: nfs
        server: nas.${SECRET_DOMAIN}
        path: /mnt/hdd-data/Photos
        globalMounts:
          - path: /photos
            readOnly: true
      tmp:
        type: emptyDir
        globalMounts:
          - path: /tmp
    route:
      app:
        hostnames:
          - "{{ .Release.Name }}.${SECRET_DOMAIN}"
          - foto.${SECRET_DOMAIN}
        parentRefs:
          - name: envoy-internal
            namespace: network
            sectionName: https
        rules:
          - backendRefs:
              - identifier: app
                port: *port
    service:
      app:
        ports:
          http:
            port: *port
          metrics-api:
            port: 8081
          metrics-ms:
            port: 8082
      machine-learning:
        ports:
          http:
            port: *mlPort
