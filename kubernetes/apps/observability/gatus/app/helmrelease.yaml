---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app gatus
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: app-template
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    controllers:
      gatus:
        annotations:
          reloader.stakater.com/auto: "true"
        initContainers:
          init-config:
            image:
              repository: ghcr.io/home-operations/k8s-sidecar
              tag: 1.30.8@sha256:75fb3721268d85659b16598f65b5a2dd31efb39c2e907bb1c5822bbfe970a9fb
            env:
              FOLDER: /config
              LABEL: gatus.io/enabled
              NAMESPACE: ALL
              RESOURCE: both
              UNIQUE_FILENAMES: true
              METHOD: WATCH
            restartPolicy: Always
            resources:
              requests:
                cpu: 10m
                memory: 64Mi
              limits:
                memory: 128Mi
        containers:
          gatus:
            image:
              repository: ghcr.io/twin/gatus
              tag: v5.22.0@sha256:e38fb2489230da144ef85f6892dab9db84e415bdffdf0c6b995ba421d1b6bf3e
            env:
              TZ: ${CONFIG_TIMEZONE}
              GATUS_CONFIG_PATH: /config
              GATUS_DELAY_START_SECONDS: 5
              GATUS_WEB_PORT: &port 80
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /health
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            resources:
              requests:
                cpu: 100m
                memory: 128Mi
              limits:
                memory: 256Mi
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
        serviceAccount:
          name: *app
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: &uid 65534
        runAsGroup: *uid
    service:
      app:
        ports:
          http:
            port: *port
    serviceMonitor:
      app:
        endpoints:
          - port: http
    ingress:
      app:
        className: internal
        hosts:
          - host: &host "{{ .Release.Name }}.${SECRET_DOMAIN}"
            paths: &paths
              - path: /
                service:
                  identifier: app
                  port: http
          - host: &customHost status.${SECRET_DOMAIN}
            paths: *paths
        tls:
          - hosts:
              - *host
              - *customHost
    persistence:
      config:
        type: emptyDir
      config-file:
        type: configMap
        name: "{{ .Release.Name }}-config"
        globalMounts:
          - path: /config/config.yaml
            subPath: config.yaml
            readOnly: true
